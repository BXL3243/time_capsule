{"ast":null,"code":"import Web3 from \"web3\";\nexport const initWeb3 = () => {\n  if (!window.web3) return;\n  window.web3 = new Web3(window.web3.currentProvider);\n};\nexport const toEthUnit = wei => {\n  if (!window.web3) return 0;\n  return Number.parseFloat(Web3.utils.fromWei(wei));\n};\nexport const toWeiUnit = eth => {\n  if (!window.web3) return \"\";\n  return Web3.utils.toWei(eth);\n};\nexport const getNetwork = async () => {\n  if (!window.web3 || !window.web3.eth) return 1; // return window.web3.eth.net.getId();\n\n  return window.web3.version.network;\n};\nexport const toCents = (dollars, token) => {\n  if (token.address === \"ETH\") return toWeiUnit(dollars.toString());\n  return Web3.utils.toBN(dollars * 10 ** token.decimals).toString();\n};\nexport const toDollars = (cents, token) => {\n  if (token.address === \"ETH\") return cents;\n  return cents / 10 ** token.decimals;\n};","map":{"version":3,"sources":["/Users/richard/Downloads/crypto-capsule/client/src/services/web3Service.ts"],"names":["Web3","initWeb3","window","web3","currentProvider","toEthUnit","wei","Number","parseFloat","utils","fromWei","toWeiUnit","eth","toWei","getNetwork","version","network","toCents","dollars","token","address","toString","toBN","decimals","toDollars","cents"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AAUA,OAAO,MAAMC,QAAQ,GAAG,MAAY;AAClC,MAAI,CAACC,MAAM,CAACC,IAAZ,EAAkB;AAClBD,EAAAA,MAAM,CAACC,IAAP,GAAc,IAAIH,IAAJ,CAASE,MAAM,CAACC,IAAP,CAAYC,eAArB,CAAd;AACD,CAHM;AAKP,OAAO,MAAMC,SAAS,GAAIC,GAAD,IAAqB;AAC5C,MAAI,CAACJ,MAAM,CAACC,IAAZ,EAAkB,OAAO,CAAP;AAClB,SAAOI,MAAM,CAACC,UAAP,CAAkBR,IAAI,CAACS,KAAL,CAAWC,OAAX,CAAmBJ,GAAnB,CAAlB,CAAP;AACD,CAHM;AAKP,OAAO,MAAMK,SAAS,GAAIC,GAAD,IAAyB;AAChD,MAAI,CAACV,MAAM,CAACC,IAAZ,EAAkB,OAAO,EAAP;AAClB,SAAOH,IAAI,CAACS,KAAL,CAAWI,KAAX,CAAiBD,GAAjB,CAAP;AACD,CAHM;AAKP,OAAO,MAAME,UAAU,GAAG,YAA6B;AACrD,MAAI,CAACZ,MAAM,CAACC,IAAR,IAAgB,CAACD,MAAM,CAACC,IAAP,CAAYS,GAAjC,EAAsC,OAAO,CAAP,CADe,CAErD;;AACA,SAAOV,MAAM,CAACC,IAAP,CAAYY,OAAZ,CAAoBC,OAA3B;AACD,CAJM;AAMP,OAAO,MAAMC,OAAO,GAAG,CAACC,OAAD,EAAkBC,KAAlB,KAA2C;AAChE,MAAIA,KAAK,CAACC,OAAN,KAAkB,KAAtB,EAA6B,OAAOT,SAAS,CAACO,OAAO,CAACG,QAAR,EAAD,CAAhB;AAC7B,SAAOrB,IAAI,CAACS,KAAL,CAAWa,IAAX,CAAgBJ,OAAO,GAAG,MAAMC,KAAK,CAACI,QAAtC,EAAgDF,QAAhD,EAAP;AACD,CAHM;AAKP,OAAO,MAAMG,SAAS,GAAG,CAACC,KAAD,EAAgBN,KAAhB,KAAyC;AAChE,MAAIA,KAAK,CAACC,OAAN,KAAkB,KAAtB,EAA6B,OAAOK,KAAP;AAC7B,SAAOA,KAAK,GAAG,MAAMN,KAAK,CAACI,QAA3B;AACD,CAHM","sourcesContent":["import Web3 from \"web3\";\nimport BN from \"bn.js\";\nimport Token from \"../types/Token\";\n\ndeclare global {\n  interface Window {\n    web3: any;\n  }\n}\n\nexport const initWeb3 = (): void => {\n  if (!window.web3) return;\n  window.web3 = new Web3(window.web3.currentProvider);\n};\n\nexport const toEthUnit = (wei: BN): number => {\n  if (!window.web3) return 0;\n  return Number.parseFloat(Web3.utils.fromWei(wei));\n};\n\nexport const toWeiUnit = (eth: string): string => {\n  if (!window.web3) return \"\";\n  return Web3.utils.toWei(eth);\n};\n\nexport const getNetwork = async (): Promise<number> => {\n  if (!window.web3 || !window.web3.eth) return 1;\n  // return window.web3.eth.net.getId();\n  return window.web3.version.network;\n};\n\nexport const toCents = (dollars: number, token: Token): string => {\n  if (token.address === \"ETH\") return toWeiUnit(dollars.toString());\n  return Web3.utils.toBN(dollars * 10 ** token.decimals).toString();\n};\n\nexport const toDollars = (cents: number, token: Token): number => {\n  if (token.address === \"ETH\") return cents;\n  return cents / 10 ** token.decimals;\n};\n"]},"metadata":{},"sourceType":"module"}