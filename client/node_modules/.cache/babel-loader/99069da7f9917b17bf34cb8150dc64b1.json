{"ast":null,"code":"import _regeneratorRuntime from\"/Users/richard/Downloads/crypto-capsule/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/richard/Downloads/crypto-capsule/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import Web3 from\"web3\";export var initWeb3=function initWeb3(){if(!window.web3)return;window.web3=new Web3(window.web3.currentProvider);};export var toEthUnit=function toEthUnit(wei){if(!window.web3)return 0;return Number.parseFloat(Web3.utils.fromWei(wei));};export var toWeiUnit=function toWeiUnit(eth){if(!window.web3)return\"\";return Web3.utils.toWei(eth);};export var getNetwork=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(!window.web3||!window.web3.eth)){_context.next=2;break;}return _context.abrupt(\"return\",1);case 2:return _context.abrupt(\"return\",window.web3.eth.net.getId());case 3:case\"end\":return _context.stop();}}},_callee);}));return function getNetwork(){return _ref.apply(this,arguments);};}();export var toCents=function toCents(dollars,token){if(token.address===\"ETH\")return toWeiUnit(dollars.toString());return Web3.utils.toBN(dollars*Math.pow(10,token.decimals)).toString();};export var toDollars=function toDollars(cents,token){if(token.address===\"ETH\")return cents;return cents/Math.pow(10,token.decimals);};","map":{"version":3,"sources":["/Users/richard/Downloads/crypto-capsule/client/src/services/web3Service.ts"],"names":["Web3","initWeb3","window","web3","currentProvider","toEthUnit","wei","Number","parseFloat","utils","fromWei","toWeiUnit","eth","toWei","getNetwork","net","getId","toCents","dollars","token","address","toString","toBN","decimals","toDollars","cents"],"mappings":"uUAAA,MAAOA,CAAAA,IAAP,KAAiB,MAAjB,CAUA,MAAO,IAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAY,CAClC,GAAI,CAACC,MAAM,CAACC,IAAZ,CAAkB,OAClBD,MAAM,CAACC,IAAP,CAAc,GAAIH,CAAAA,IAAJ,CAASE,MAAM,CAACC,IAAP,CAAYC,eAArB,CAAd,CACD,CAHM,CAKP,MAAO,IAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACC,GAAD,CAAqB,CAC5C,GAAI,CAACJ,MAAM,CAACC,IAAZ,CAAkB,MAAO,EAAP,CAClB,MAAOI,CAAAA,MAAM,CAACC,UAAP,CAAkBR,IAAI,CAACS,KAAL,CAAWC,OAAX,CAAmBJ,GAAnB,CAAlB,CAAP,CACD,CAHM,CAKP,MAAO,IAAMK,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACC,GAAD,CAAyB,CAChD,GAAI,CAACV,MAAM,CAACC,IAAZ,CAAkB,MAAO,EAAP,CAClB,MAAOH,CAAAA,IAAI,CAACS,KAAL,CAAWI,KAAX,CAAiBD,GAAjB,CAAP,CACD,CAHM,CAKP,MAAO,IAAME,CAAAA,UAAU,0FAAG,wIACpB,CAACZ,MAAM,CAACC,IAAR,EAAgB,CAACD,MAAM,CAACC,IAAP,CAAYS,GADT,0DACqB,CADrB,yCAEjBV,MAAM,CAACC,IAAP,CAAYS,GAAZ,CAAgBG,GAAhB,CAAoBC,KAApB,EAFiB,wDAAH,kBAAVF,CAAAA,UAAU,0CAAhB,CAKP,MAAO,IAAMG,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,OAAD,CAAkBC,KAAlB,CAA2C,CAChE,GAAIA,KAAK,CAACC,OAAN,GAAkB,KAAtB,CAA6B,MAAOT,CAAAA,SAAS,CAACO,OAAO,CAACG,QAAR,EAAD,CAAhB,CAC7B,MAAOrB,CAAAA,IAAI,CAACS,KAAL,CAAWa,IAAX,CAAgBJ,OAAO,UAAG,EAAH,CAASC,KAAK,CAACI,QAAf,CAAvB,EAAgDF,QAAhD,EAAP,CACD,CAHM,CAKP,MAAO,IAAMG,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACC,KAAD,CAAgBN,KAAhB,CAAyC,CAChE,GAAIA,KAAK,CAACC,OAAN,GAAkB,KAAtB,CAA6B,MAAOK,CAAAA,KAAP,CAC7B,MAAOA,CAAAA,KAAK,UAAG,EAAH,CAASN,KAAK,CAACI,QAAf,CAAZ,CACD,CAHM","sourcesContent":["import Web3 from \"web3\";\nimport BN from \"bn.js\";\nimport Token from \"../types/Token\";\n\ndeclare global {\n  interface Window {\n    web3: any;\n  }\n}\n\nexport const initWeb3 = (): void => {\n  if (!window.web3) return;\n  window.web3 = new Web3(window.web3.currentProvider);\n};\n\nexport const toEthUnit = (wei: BN): number => {\n  if (!window.web3) return 0;\n  return Number.parseFloat(Web3.utils.fromWei(wei));\n};\n\nexport const toWeiUnit = (eth: string): string => {\n  if (!window.web3) return \"\";\n  return Web3.utils.toWei(eth);\n};\n\nexport const getNetwork = async (): Promise<number> => {\n  if (!window.web3 || !window.web3.eth) return 1;\n  return window.web3.eth.net.getId();\n};\n\nexport const toCents = (dollars: number, token: Token): string => {\n  if (token.address === \"ETH\") return toWeiUnit(dollars.toString());\n  return Web3.utils.toBN(dollars * 10 ** token.decimals).toString();\n};\n\nexport const toDollars = (cents: number, token: Token): number => {\n  if (token.address === \"ETH\") return cents;\n  return cents / 10 ** token.decimals;\n};\n"]},"metadata":{},"sourceType":"module"}