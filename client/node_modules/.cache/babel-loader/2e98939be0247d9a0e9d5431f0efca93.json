{"ast":null,"code":"import rinkebyTokens from \"../data/rinkebyTokens\";\nimport { getGlobals } from \"../utils/globals\";\nexport const getTokens = async () => {\n  const globals = await getGlobals();\n  let tokens = [];\n\n  if (globals.TOKENS.length > 0) {\n    tokens = [...rinkebyTokens];\n  } else {\n    const response = await fetch(globals.TOKENS_URL);\n    const data = await response.json();\n    tokens = data.tokens;\n  }\n\n  tokens.push(ethToken);\n  tokens.reverse();\n  return tokens;\n};\nexport const ethToken = {\n  address: \"ETH\",\n  name: \"Ether\",\n  symbol: \"ETH\",\n  decimals: 18,\n  logoURI: \"https://assets.coingecko.com/coins/images/279/thumb/ethereum.png?1595348880\"\n};","map":{"version":3,"sources":["/Users/richard/Downloads/crypto-capsule/client/src/services/tokenService.ts"],"names":["rinkebyTokens","getGlobals","getTokens","globals","tokens","TOKENS","length","response","fetch","TOKENS_URL","data","json","push","ethToken","reverse","address","name","symbol","decimals","logoURI"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,uBAA1B;AAEA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,OAAO,MAAMC,SAAS,GAAG,YAA8B;AACrD,QAAMC,OAAO,GAAG,MAAMF,UAAU,EAAhC;AACA,MAAIG,MAAe,GAAG,EAAtB;;AAEA,MAAID,OAAO,CAACE,MAAR,CAAeC,MAAf,GAAwB,CAA5B,EAA+B;AAC7BF,IAAAA,MAAM,GAAG,CAAC,GAAGJ,aAAJ,CAAT;AACD,GAFD,MAEO;AACL,UAAMO,QAAQ,GAAG,MAAMC,KAAK,CAACL,OAAO,CAACM,UAAT,CAA5B;AACA,UAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAnB;AACAP,IAAAA,MAAM,GAAGM,IAAI,CAACN,MAAd;AACD;;AACDA,EAAAA,MAAM,CAACQ,IAAP,CAAYC,QAAZ;AACAT,EAAAA,MAAM,CAACU,OAAP;AACA,SAAOV,MAAP;AACD,CAdM;AAgBP,OAAO,MAAMS,QAAe,GAAG;AAC7BE,EAAAA,OAAO,EAAE,KADoB;AAE7BC,EAAAA,IAAI,EAAE,OAFuB;AAG7BC,EAAAA,MAAM,EAAE,KAHqB;AAI7BC,EAAAA,QAAQ,EAAE,EAJmB;AAK7BC,EAAAA,OAAO,EACL;AAN2B,CAAxB","sourcesContent":["import rinkebyTokens from \"../data/rinkebyTokens\";\nimport Token from \"../types/Token\";\nimport { getGlobals } from \"../utils/globals\";\n\nexport const getTokens = async (): Promise<Token[]> => {\n  const globals = await getGlobals();\n  let tokens: Token[] = [];\n\n  if (globals.TOKENS.length > 0) {\n    tokens = [...rinkebyTokens];\n  } else {\n    const response = await fetch(globals.TOKENS_URL);\n    const data = await response.json();\n    tokens = data.tokens;\n  }\n  tokens.push(ethToken);\n  tokens.reverse();\n  return tokens;\n};\n\nexport const ethToken: Token = {\n  address: \"ETH\",\n  name: \"Ether\",\n  symbol: \"ETH\",\n  decimals: 18,\n  logoURI:\n    \"https://assets.coingecko.com/coins/images/279/thumb/ethereum.png?1595348880\",\n};\n"]},"metadata":{},"sourceType":"module"}