{"ast":null,"code":"var _jsxFileName = \"/Users/richard/Documents/time-vault/client/src/components/Countdown.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport styled from \"styled-components\";\nimport countdown from \"countdown\";\nimport { getCanBeOpened, getNextOpenDate } from \"../services/dateHelper\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledCountdown = styled.div`\n  font-size: ${props => props.short ? \"3rem\" : \"4rem\"};\n  transform: ${props => props.short ? \"none\" : \"rotate(0deg)\"};\n  color: var(--main);\n  margin-bottom: ${props => props.short ? \"0\" : \"2rem\"};\n`;\n_c = StyledCountdown;\n\nconst Countdown = props => {\n  _s();\n\n  const [now, setNow] = useState(new Date());\n  const nowRef = useRef(now);\n  nowRef.current = now;\n  const canBeOpened = getCanBeOpened(props.capsule);\n  const nextOpen = getNextOpenDate(props.capsule);\n\n  const tick = () => {\n    setNow(new Date(nowRef.current.setSeconds(nowRef.current.getSeconds() + 1)));\n  };\n\n  useEffect(() => {\n    setInterval(() => tick(), 1000);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(StyledCountdown, {\n    short: props.short,\n    children: props.capsule.empty ? \"Vault is Empty\" : canBeOpened ? \"Ready to Open\" : countdown(new Date(), nextOpen, countdown.ALL, props.short ? 2 : 3).toString()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Countdown, \"6Ln0VIY/+S27FADUPgzo0VC/wKQ=\");\n\n_c2 = Countdown;\nexport default Countdown;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StyledCountdown\");\n$RefreshReg$(_c2, \"Countdown\");","map":{"version":3,"sources":["/Users/richard/Documents/time-vault/client/src/components/Countdown.tsx"],"names":["React","useEffect","useRef","useState","styled","countdown","getCanBeOpened","getNextOpenDate","StyledCountdown","div","props","short","Countdown","now","setNow","Date","nowRef","current","canBeOpened","capsule","nextOpen","tick","setSeconds","getSeconds","setInterval","empty","ALL","toString"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AAEA,SAASC,cAAT,EAAyBC,eAAzB,QAAgD,wBAAhD;;AAMA,MAAMC,eAAe,GAAGJ,MAAM,CAACK,GAAI;AACnC,eAAgBC,KAAD,IAA4BA,KAAK,CAACC,KAAN,GAAc,MAAd,GAAuB,MAAQ;AAC1E,eAAgBD,KAAD,IACXA,KAAK,CAACC,KAAN,GAAc,MAAd,GAAuB,cAAe;AAC1C;AACA,mBAAoBD,KAAD,IAA4BA,KAAK,CAACC,KAAN,GAAc,GAAd,GAAoB,MAAQ;AAC3E,CANA;KAAMH,e;;AAaN,MAAMI,SAAS,GAAIF,KAAD,IAA+B;AAAA;;AAC/C,QAAM,CAACG,GAAD,EAAMC,MAAN,IAAgBX,QAAQ,CAAC,IAAIY,IAAJ,EAAD,CAA9B;AACA,QAAMC,MAAM,GAAGd,MAAM,CAACW,GAAD,CAArB;AACAG,EAAAA,MAAM,CAACC,OAAP,GAAiBJ,GAAjB;AAEA,QAAMK,WAAW,GAAGZ,cAAc,CAACI,KAAK,CAACS,OAAP,CAAlC;AACA,QAAMC,QAAQ,GAAGb,eAAe,CAACG,KAAK,CAACS,OAAP,CAAhC;;AAEA,QAAME,IAAI,GAAG,MAAM;AACjBP,IAAAA,MAAM,CACJ,IAAIC,IAAJ,CAASC,MAAM,CAACC,OAAP,CAAeK,UAAf,CAA0BN,MAAM,CAACC,OAAP,CAAeM,UAAf,KAA8B,CAAxD,CAAT,CADI,CAAN;AAGD,GAJD;;AAMAtB,EAAAA,SAAS,CAAC,MAAM;AACduB,IAAAA,WAAW,CAAC,MAAMH,IAAI,EAAX,EAAe,IAAf,CAAX;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE,QAAC,eAAD;AAAiB,IAAA,KAAK,EAAEX,KAAK,CAACC,KAA9B;AAAA,cACGD,KAAK,CAACS,OAAN,CAAcM,KAAd,GACG,gBADH,GAEGP,WAAW,GACX,eADW,GAEXb,SAAS,CACP,IAAIU,IAAJ,EADO,EAEPK,QAFO,EAGPf,SAAS,CAACqB,GAHH,EAIPhB,KAAK,CAACC,KAAN,GAAc,CAAd,GAAkB,CAJX,CAAT,CAKEgB,QALF;AALN;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CAhCD;;GAAMf,S;;MAAAA,S;AAkCN,eAAeA,SAAf","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport styled from \"styled-components\";\nimport countdown from \"countdown\";\nimport CapsuleType from \"../types/CapsuleType\";\nimport { getCanBeOpened, getNextOpenDate } from \"../services/dateHelper\";\n\ntype CountdownProps = {\n  short?: boolean;\n};\n\nconst StyledCountdown = styled.div`\n  font-size: ${(props: CountdownProps) => (props.short ? \"3rem\" : \"4rem\")};\n  transform: ${(props: CountdownProps) =>\n    props.short ? \"none\" : \"rotate(0deg)\"};\n  color: var(--main);\n  margin-bottom: ${(props: CountdownProps) => (props.short ? \"0\" : \"2rem\")};\n`;\n\ntype Props = {\n  capsule: CapsuleType;\n  short?: boolean;\n};\n\nconst Countdown = (props: Props): JSX.Element => {\n  const [now, setNow] = useState(new Date());\n  const nowRef = useRef(now);\n  nowRef.current = now;\n\n  const canBeOpened = getCanBeOpened(props.capsule);\n  const nextOpen = getNextOpenDate(props.capsule);\n\n  const tick = () => {\n    setNow(\n      new Date(nowRef.current.setSeconds(nowRef.current.getSeconds() + 1))\n    );\n  };\n\n  useEffect(() => {\n    setInterval(() => tick(), 1000);\n  }, []);\n\n  return (\n    <StyledCountdown short={props.short}>\n      {props.capsule.empty\n        ? \"Vault is Empty\"\n        : canBeOpened\n        ? \"Ready to Open\"\n        : countdown(\n            new Date(),\n            nextOpen,\n            countdown.ALL,\n            props.short ? 2 : 3\n          ).toString()}\n    </StyledCountdown>\n  );\n};\n\nexport default Countdown;\n"]},"metadata":{},"sourceType":"module"}