{"ast":null,"code":"import BN from \"bn.js\";\nexport const inputToDate = input => {\n  const lDt = input.split(\" \");\n  const value_d = lDt[0];\n  const items = value_d.split(\"/\");\n  const time = lDt.length > 1 ? lDt[1].split(\":\") : [\"00\", \"00\", \"00\"];\n  const newDate = new Date(`${items[0]}/${items[1]}/${items[2]} ${time[0]}:${time[1]}:${time[2]}`);\n  return newDate;\n};\nexport const dateToUnix = date => {\n  return new BN(date.getTime() / 1000);\n};\nexport const getCurrentUnix = () => {\n  return new Date().getTime() / 1000;\n};\nexport const UnixToDate = unix => {\n  return new Date(unix * 1000);\n};\n_c = UnixToDate;\nexport const DAYS = 60 * 60 * 24;\nexport const WEEKS = 60 * 60 * 24 * 7;\nexport const MONTHS = Math.round(60 * 60 * 24 * (365 / 12));\nexport const YEARS = Math.round(60 * 60 * 24 * 365);\nexport const getPeriodType = periodSize => {\n  const size = Number(periodSize);\n  if (size === DAYS) return \"daily\";\n  if (size === WEEKS) return \"weekly\";\n  if (size === MONTHS) return \"monthly\";\n  if (size === YEARS) return \"annually\";\n  return \"unknown\";\n};\nexport const getPeriodSize = periodType => {\n  if (periodType === \"daily\") return DAYS;\n  if (periodType === \"weekly\") return WEEKS;\n  if (periodType === \"monthly\") return MONTHS;\n  if (periodType === \"annually\") return YEARS;\n  return 1;\n};\nexport const getNextOpenDate = capsule => {\n  return new Date(capsule.distributionDate.getTime() + capsule.claimedPeriods * getPeriodSize(capsule.periodType) * 1000);\n};\nexport const getCanBeOpened = capsule => {\n  return capsule.distributionDate.getTime() + capsule.claimedPeriods * getPeriodSize(capsule.periodType) * 1000 < new Date().getTime();\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"UnixToDate\");","map":{"version":3,"sources":["/Users/richard/Documents/time-vault/client/src/services/dateHelper.ts"],"names":["BN","inputToDate","input","lDt","split","value_d","items","time","length","newDate","Date","dateToUnix","date","getTime","getCurrentUnix","UnixToDate","unix","DAYS","WEEKS","MONTHS","Math","round","YEARS","getPeriodType","periodSize","size","Number","getPeriodSize","periodType","getNextOpenDate","capsule","distributionDate","claimedPeriods","getCanBeOpened"],"mappings":"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","sourcesContent":["import BN from \"bn.js\";\nimport CapsuleType from \"../types/CapsuleType\";\n\nexport const inputToDate = (input: string): Date => {\n  const lDt = input.split(\" \");\n  const value_d = lDt[0];\n  const items = value_d.split(\"/\");\n  const time = lDt.length > 1 ? lDt[1].split(\":\") : [\"00\", \"00\", \"00\"];\n  const newDate = new Date(\n    `${items[0]}/${items[1]}/${items[2]} ${time[0]}:${time[1]}:${time[2]}`\n  );\n  return newDate;\n};\n\nexport const dateToUnix = (date: Date): BN => {\n  return new BN(date.getTime() / 1000);\n};\n\nexport const getCurrentUnix = (): number => {\n  return new Date().getTime() / 1000;\n};\n\nexport const UnixToDate = (unix: number): Date => {\n  return new Date(unix * 1000);\n};\n\nexport const DAYS = 60 * 60 * 24;\nexport const WEEKS = 60 * 60 * 24 * 7;\nexport const MONTHS = Math.round(60 * 60 * 24 * (365 / 12));\nexport const YEARS = Math.round(60 * 60 * 24 * 365);\n\nexport const getPeriodType = (periodSize: string): string => {\n  const size = Number(periodSize);\n  if (size === DAYS) return \"daily\";\n  if (size === WEEKS) return \"weekly\";\n  if (size === MONTHS) return \"monthly\";\n  if (size === YEARS) return \"annually\";\n  return \"unknown\";\n};\n\nexport const getPeriodSize = (periodType: string): number => {\n  if (periodType === \"daily\") return DAYS;\n  if (periodType === \"weekly\") return WEEKS;\n  if (periodType === \"monthly\") return MONTHS;\n  if (periodType === \"annually\") return YEARS;\n  return 1;\n};\n\nexport const getNextOpenDate = (capsule: CapsuleType): Date => {\n  return new Date(\n    capsule.distributionDate.getTime() +\n      capsule.claimedPeriods * getPeriodSize(capsule.periodType) * 1000\n  );\n};\n\nexport const getCanBeOpened = (capsule: CapsuleType): boolean => {\n  return (\n    capsule.distributionDate.getTime() +\n      capsule.claimedPeriods * getPeriodSize(capsule.periodType) * 1000 <\n    new Date().getTime()\n  );\n};\n"]},"metadata":{},"sourceType":"module"}