{"ast":null,"code":"import abi from \"../data/aggregatorV3InterfaceABI.json\";\nimport { getGlobals } from \"../utils/globals\";\nexport const getOracleContract = async oracle => {\n  return new window.web3.eth.Contract(abi, oracle);\n};\nexport const getOracle = async token => {\n  const globals = await getGlobals();\n  const oracles = globals.ORACLES.filter(o => o.token === token);\n  if (oracles.length === 0) return \"\";\n  return oracles[0].oracle;\n};\nexport const getTokenPriceInUsd = async token => {\n  const oracle = await getOracle(token);\n  if (!oracle) return 0;\n  const oracleContract = await getOracleContract(oracle);\n  const roundData = await oracleContract.methods.latestRoundData().call();\n  return roundData.answer / 10 ** 8;\n};\nexport const getTokenValueInUsd = async (token, amount) => {\n  const price = await getTokenPriceInUsd(token);\n  return amount * price;\n};\nexport const getCapsuleUsdValue = async (capsule) => {\n  const usds = [];\n  const promises = capsule.assets.map(async (asset) => usds.push(await getTokenValueInUsd(asset.token, Number(asset.value) / 10 ** 18)));\n  await Promise.all(promises);\n  return usds.reduce((a, b) => a + b, 0);\n};","map":{"version":3,"sources":["/Users/richard/Documents/GitHub/time_capsule/client/src/services/oracleService.ts"],"names":["abi","getGlobals","getOracleContract","oracle","window","web3","eth","Contract","getOracle","token","globals","oracles","ORACLES","filter","o","length","getTokenPriceInUsd","oracleContract","roundData","methods","latestRoundData","call","answer","getTokenValueInUsd","amount","price","getCapsuleUsdValue","capsule","usds","promises","assets","map","asset","push","Number","value","Promise","all","reduce","a","b"],"mappings":"AACA,OAAOA,GAAP,MAAgB,uCAAhB;AAGA,SAASC,UAAT,QAA2B,kBAA3B;AAUA,OAAO,MAAMC,iBAAiB,GAAG,MAAOC,MAAP,IAA6C;AAC5E,SAAO,IAAKC,MAAD,CAAgBC,IAAhB,CAAqBC,GAArB,CAAyBC,QAA7B,CAAsCP,GAAtC,EAA2CG,MAA3C,CAAP;AACD,CAFM;AAIP,OAAO,MAAMK,SAAS,GAAG,MAAOC,KAAP,IAA0C;AACjE,QAAMC,OAAO,GAAG,MAAMT,UAAU,EAAhC;AACA,QAAMU,OAAO,GAAGD,OAAO,CAACE,OAAR,CAAgBC,MAAhB,CAAwBC,CAAD,IAAmBA,CAAC,CAACL,KAAF,KAAYA,KAAtD,CAAhB;AACA,MAAIE,OAAO,CAACI,MAAR,KAAmB,CAAvB,EAA0B,OAAO,EAAP;AAC1B,SAAOJ,OAAO,CAAC,CAAD,CAAP,CAAWR,MAAlB;AACD,CALM;AAOP,OAAO,MAAMa,kBAAkB,GAAG,MAAOP,KAAP,IAA0C;AAC1E,QAAMN,MAAM,GAAG,MAAMK,SAAS,CAACC,KAAD,CAA9B;AACA,MAAI,CAACN,MAAL,EAAa,OAAO,CAAP;AACb,QAAMc,cAAc,GAAG,MAAMf,iBAAiB,CAACC,MAAD,CAA9C;AACA,QAAMe,SAAwB,GAAG,MAAMD,cAAc,CAACE,OAAf,CACpCC,eADoC,GAEpCC,IAFoC,EAAvC;AAGA,SAAOH,SAAS,CAACI,MAAV,GAAmB,MAAM,CAAhC;AACD,CARM;AAUP,OAAO,MAAMC,kBAAkB,GAAG,OAChCd,KADgC,EAEhCe,MAFgC,KAGZ;AACpB,QAAMC,KAAK,GAAG,MAAMT,kBAAkB,CAACP,KAAD,CAAtC;AACA,SAAOe,MAAM,GAAGC,KAAhB;AACD,CANM;AAQP,OAAO,MAAMC,kBAAkB,GAAG,OAChCC,OADgC,KAEZ;AACpB,QAAMC,IAAc,GAAG,EAAvB;AACA,QAAMC,QAAQ,GAAGF,OAAO,CAACG,MAAR,CAAeC,GAAf,CAAmB,OAAOC,KAAP,KAClCJ,IAAI,CAACK,IAAL,CACE,MAAMV,kBAAkB,CAACS,KAAK,CAACvB,KAAP,EAAcyB,MAAM,CAACF,KAAK,CAACG,KAAP,CAAN,GAAsB,MAAM,EAA1C,CAD1B,CADe,CAAjB;AAKA,QAAMC,OAAO,CAACC,GAAR,CAAYR,QAAZ,CAAN;AACA,SAAOD,IAAI,CAACU,MAAL,CAAY,CAACC,CAAD,EAAYC,CAAZ,KAA0BD,CAAC,GAAGC,CAA1C,EAA6C,CAA7C,CAAP;AACD,CAXM","sourcesContent":["import { Contract } from \"web3-eth-contract\";\nimport abi from \"../data/aggregatorV3InterfaceABI.json\";\nimport CapsuleType, { Asset } from \"../types/CapsuleType\";\nimport { OracleType } from \"../data/oracles\";\nimport { getGlobals } from \"../utils/globals\";\n\ntype RoundDataType = {\n  roundId: number;\n  answer: number;\n  startedAt: number;\n  updatedAt: number;\n  answeredInRound: number;\n};\n\nexport const getOracleContract = async (oracle: string): Promise<Contract> => {\n  return new (window as any).web3.eth.Contract(abi, oracle);\n};\n\nexport const getOracle = async (token: string): Promise<string> => {\n  const globals = await getGlobals();\n  const oracles = globals.ORACLES.filter((o: OracleType) => o.token === token);\n  if (oracles.length === 0) return \"\";\n  return oracles[0].oracle;\n};\n\nexport const getTokenPriceInUsd = async (token: string): Promise<number> => {\n  const oracle = await getOracle(token);\n  if (!oracle) return 0;\n  const oracleContract = await getOracleContract(oracle);\n  const roundData: RoundDataType = await oracleContract.methods\n    .latestRoundData()\n    .call();\n  return roundData.answer / 10 ** 8;\n};\n\nexport const getTokenValueInUsd = async (\n  token: string,\n  amount: number\n): Promise<number> => {\n  const price = await getTokenPriceInUsd(token);\n  return amount * price;\n};\n\nexport const getCapsuleUsdValue = async (\n  capsule: CapsuleType\n): Promise<number> => {\n  const usds: number[] = [];\n  const promises = capsule.assets.map(async (asset: Asset) =>\n    usds.push(\n      await getTokenValueInUsd(asset.token, Number(asset.value) / 10 ** 18)\n    )\n  );\n  await Promise.all(promises);\n  return usds.reduce((a: number, b: number) => a + b, 0);\n};\n"]},"metadata":{},"sourceType":"module"}