{"ast":null,"code":"import BN from\"bn.js\";export var inputToDate=function inputToDate(input){var items=input.split(\"/\");return new Date(\"\".concat(items[2],\"/\").concat(items[0],\"/\").concat(items[1]));};export var dateToUnix=function dateToUnix(date){return new BN(date.getTime()/1000);};export var getCurrentUnix=function getCurrentUnix(){return new Date().getTime()/1000;};export var UnixToDate=function UnixToDate(unix){return new Date(unix*1000);};export var DAYS=60*60*24;export var WEEKS=60*60*24*7;export var MONTHS=Math.round(60*60*24*(365/12));export var YEARS=Math.round(60*60*24*365);export var getPeriodType=function getPeriodType(periodSize){var size=Number(periodSize);if(size===DAYS)return\"daily\";if(size===WEEKS)return\"weekly\";if(size===MONTHS)return\"monthly\";if(size===YEARS)return\"annually\";return\"unknown\";};export var getPeriodSize=function getPeriodSize(periodType){if(periodType===\"daily\")return DAYS;if(periodType===\"weekly\")return WEEKS;if(periodType===\"monthly\")return MONTHS;if(periodType===\"annually\")return YEARS;return 1;};export var getNextOpenDate=function getNextOpenDate(capsule){return new Date(capsule.distributionDate.getTime()+capsule.claimedPeriods*getPeriodSize(capsule.periodType)*1000);};export var getCanBeOpened=function getCanBeOpened(capsule){return capsule.distributionDate.getTime()+capsule.claimedPeriods*getPeriodSize(capsule.periodType)*1000<new Date().getTime();};","map":{"version":3,"sources":["/Users/richard/Documents/GitHub/time_sapsule/client/src/services/dateHelper.ts"],"names":["BN","inputToDate","input","items","split","Date","dateToUnix","date","getTime","getCurrentUnix","UnixToDate","unix","DAYS","WEEKS","MONTHS","Math","round","YEARS","getPeriodType","periodSize","size","Number","getPeriodSize","periodType","getNextOpenDate","capsule","distributionDate","claimedPeriods","getCanBeOpened"],"mappings":"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","sourcesContent":["import BN from \"bn.js\";\nimport CapsuleType from \"../types/CapsuleType\";\n\nexport const inputToDate = (input: string): Date => {\n  const items = input.split(\"/\");\n  return new Date(`${items[2]}/${items[0]}/${items[1]}`);\n};\n\nexport const dateToUnix = (date: Date): BN => {\n  return new BN(date.getTime() / 1000);\n};\n\nexport const getCurrentUnix = (): number => {\n  return new Date().getTime() / 1000;\n};\n\nexport const UnixToDate = (unix: number): Date => {\n  return new Date(unix * 1000);\n};\n\nexport const DAYS = 60 * 60 * 24;\nexport const WEEKS = 60 * 60 * 24 * 7;\nexport const MONTHS = Math.round(60 * 60 * 24 * (365 / 12));\nexport const YEARS = Math.round(60 * 60 * 24 * 365);\n\nexport const getPeriodType = (periodSize: string): string => {\n  const size = Number(periodSize);\n  if (size === DAYS) return \"daily\";\n  if (size === WEEKS) return \"weekly\";\n  if (size === MONTHS) return \"monthly\";\n  if (size === YEARS) return \"annually\";\n  return \"unknown\";\n};\n\nexport const getPeriodSize = (periodType: string): number => {\n  if (periodType === \"daily\") return DAYS;\n  if (periodType === \"weekly\") return WEEKS;\n  if (periodType === \"monthly\") return MONTHS;\n  if (periodType === \"annually\") return YEARS;\n  return 1;\n};\n\nexport const getNextOpenDate = (capsule: CapsuleType): Date => {\n  return new Date(\n    capsule.distributionDate.getTime() +\n      capsule.claimedPeriods * getPeriodSize(capsule.periodType) * 1000\n  );\n};\n\nexport const getCanBeOpened = (capsule: CapsuleType): boolean => {\n  return (\n    capsule.distributionDate.getTime() +\n      capsule.claimedPeriods * getPeriodSize(capsule.periodType) * 1000 <\n    new Date().getTime()\n  );\n};\n"]},"metadata":{},"sourceType":"module"}