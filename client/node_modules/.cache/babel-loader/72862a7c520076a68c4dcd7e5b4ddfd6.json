{"ast":null,"code":"import _regeneratorRuntime from\"/Users/richard/Downloads/crypto-capsule/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _toConsumableArray from\"/Users/richard/Downloads/crypto-capsule/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _asyncToGenerator from\"/Users/richard/Downloads/crypto-capsule/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import rinkebyTokens from\"../data/rinkebyTokens\";import{getGlobals}from\"../utils/globals\";export var getTokens=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var globals,tokens,response,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return getGlobals();case 2:globals=_context.sent;tokens=[];if(!(globals.TOKENS.length>0)){_context.next=8;break;}tokens=_toConsumableArray(rinkebyTokens);_context.next=15;break;case 8:_context.next=10;return fetch(globals.TOKENS_URL);case 10:response=_context.sent;_context.next=13;return response.json();case 13:data=_context.sent;tokens=data.tokens;case 15:tokens.push(ethToken);tokens.reverse();return _context.abrupt(\"return\",tokens);case 18:case\"end\":return _context.stop();}}},_callee);}));return function getTokens(){return _ref.apply(this,arguments);};}();export var ethToken={address:\"ETH\",name:\"Ether\",symbol:\"ETH\",decimals:18,logoURI:\"https://assets.coingecko.com/coins/images/279/thumb/ethereum.png?1595348880\"};","map":{"version":3,"sources":["/Users/richard/Downloads/crypto-capsule/client/src/services/tokenService.ts"],"names":["rinkebyTokens","getGlobals","getTokens","globals","tokens","TOKENS","length","fetch","TOKENS_URL","response","json","data","push","ethToken","reverse","address","name","symbol","decimals","logoURI"],"mappings":"ofAAA,MAAOA,CAAAA,aAAP,KAA0B,uBAA1B,CAEA,OAASC,UAAT,KAA2B,kBAA3B,CAEA,MAAO,IAAMC,CAAAA,SAAS,0FAAG,0LACDD,CAAAA,UAAU,EADT,QACjBE,OADiB,eAEnBC,MAFmB,CAED,EAFC,MAInBD,OAAO,CAACE,MAAR,CAAeC,MAAf,CAAwB,CAJL,0BAKrBF,MAAM,oBAAOJ,aAAP,CAAN,CALqB,qDAOEO,CAAAA,KAAK,CAACJ,OAAO,CAACK,UAAT,CAPP,SAOfC,QAPe,sCAQFA,CAAAA,QAAQ,CAACC,IAAT,EARE,SAQfC,IARe,eASrBP,MAAM,CAAGO,IAAI,CAACP,MAAd,CATqB,QAWvBA,MAAM,CAACQ,IAAP,CAAYC,QAAZ,EACAT,MAAM,CAACU,OAAP,GAZuB,gCAahBV,MAbgB,yDAAH,kBAATF,CAAAA,SAAS,0CAAf,CAgBP,MAAO,IAAMW,CAAAA,QAAe,CAAG,CAC7BE,OAAO,CAAE,KADoB,CAE7BC,IAAI,CAAE,OAFuB,CAG7BC,MAAM,CAAE,KAHqB,CAI7BC,QAAQ,CAAE,EAJmB,CAK7BC,OAAO,CACL,6EAN2B,CAAxB","sourcesContent":["import rinkebyTokens from \"../data/rinkebyTokens\";\nimport Token from \"../types/Token\";\nimport { getGlobals } from \"../utils/globals\";\n\nexport const getTokens = async (): Promise<Token[]> => {\n  const globals = await getGlobals();\n  let tokens: Token[] = [];\n\n  if (globals.TOKENS.length > 0) {\n    tokens = [...rinkebyTokens];\n  } else {\n    const response = await fetch(globals.TOKENS_URL);\n    const data = await response.json();\n    tokens = data.tokens;\n  }\n  tokens.push(ethToken);\n  tokens.reverse();\n  return tokens;\n};\n\nexport const ethToken: Token = {\n  address: \"ETH\",\n  name: \"Ether\",\n  symbol: \"ETH\",\n  decimals: 18,\n  logoURI:\n    \"https://assets.coingecko.com/coins/images/279/thumb/ethereum.png?1595348880\",\n};\n"]},"metadata":{},"sourceType":"module"}