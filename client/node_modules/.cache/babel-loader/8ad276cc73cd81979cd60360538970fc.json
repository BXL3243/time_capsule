{"ast":null,"code":"var _jsxFileName = \"/Users/richard/Downloads/crypto-capsule/client/src/components/Connector.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectAddress, setAddress } from \"../state/userSlice\";\nimport Button from \"./Button\";\nimport { getAddress } from \"../services/contracthelper\";\nimport { getTokens } from \"../services/tokenService\";\nimport { setTokens } from \"../state/tokenSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledConnector = styled.div`\n  z-index: 1;\n`;\n_c = StyledConnector;\n\nconst Connector = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const address = useSelector(selectAddress);\n\n  const connect = async () => {\n    const _address = await getAddress();\n\n    dispatch(setAddress(_address));\n    const tokens = await getTokens();\n    dispatch(setTokens(tokens));\n  };\n\n  const formattedAddress = () => {\n    if (address.length < 8) return \"\";\n    return `${address.substr(0, 4)}...${address.substr(address.length - 4, 4)}`;\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledConnector, {\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      text: address ? formattedAddress() : \"Connect\",\n      click: () => connect()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Connector, \"sRwGs9Fh4OVy7GA0crGT0QHTBtE=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c2 = Connector;\nexport default Connector;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StyledConnector\");\n$RefreshReg$(_c2, \"Connector\");","map":{"version":3,"sources":["/Users/richard/Downloads/crypto-capsule/client/src/components/Connector.tsx"],"names":["React","styled","useDispatch","useSelector","selectAddress","setAddress","Button","getAddress","getTokens","setTokens","StyledConnector","div","Connector","dispatch","address","connect","_address","tokens","formattedAddress","length","substr"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,aAAT,EAAwBC,UAAxB,QAA0C,oBAA1C;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,UAAT,QAA2B,4BAA3B;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,SAASC,SAAT,QAA0B,qBAA1B;;AAEA,MAAMC,eAAe,GAAGT,MAAM,CAACU,GAAI;AACnC;AACA,CAFA;KAAMD,e;;AAIN,MAAME,SAAS,GAAG,MAAmB;AAAA;;AACnC,QAAMC,QAAQ,GAAGX,WAAW,EAA5B;AACA,QAAMY,OAAO,GAAGX,WAAW,CAACC,aAAD,CAA3B;;AAEA,QAAMW,OAAO,GAAG,YAAY;AAC1B,UAAMC,QAAQ,GAAG,MAAMT,UAAU,EAAjC;;AACAM,IAAAA,QAAQ,CAACR,UAAU,CAACW,QAAD,CAAX,CAAR;AACA,UAAMC,MAAM,GAAG,MAAMT,SAAS,EAA9B;AACAK,IAAAA,QAAQ,CAACJ,SAAS,CAACQ,MAAD,CAAV,CAAR;AACD,GALD;;AAOA,QAAMC,gBAAgB,GAAG,MAAM;AAC7B,QAAIJ,OAAO,CAACK,MAAR,GAAiB,CAArB,EAAwB,OAAO,EAAP;AACxB,WAAQ,GAAEL,OAAO,CAACM,MAAR,CAAe,CAAf,EAAkB,CAAlB,CAAqB,MAAKN,OAAO,CAACM,MAAR,CAAeN,OAAO,CAACK,MAAR,GAAiB,CAAhC,EAAmC,CAAnC,CAAsC,EAA1E;AACD,GAHD;;AAKA,sBACE,QAAC,eAAD;AAAA,2BACE,QAAC,MAAD;AACE,MAAA,IAAI,EAAEL,OAAO,GAAGI,gBAAgB,EAAnB,GAAwB,SADvC;AAEE,MAAA,KAAK,EAAE,MAAMH,OAAO;AAFtB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAxBD;;GAAMH,S;UACaV,W,EACDC,W;;;MAFZS,S;AA0BN,eAAeA,SAAf","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectAddress, setAddress } from \"../state/userSlice\";\nimport Button from \"./Button\";\nimport { getAddress } from \"../services/contracthelper\";\nimport { getTokens } from \"../services/tokenService\";\nimport { setTokens } from \"../state/tokenSlice\";\n\nconst StyledConnector = styled.div`\n  z-index: 1;\n`;\n\nconst Connector = (): JSX.Element => {\n  const dispatch = useDispatch();\n  const address = useSelector(selectAddress);\n\n  const connect = async () => {\n    const _address = await getAddress();\n    dispatch(setAddress(_address));\n    const tokens = await getTokens();\n    dispatch(setTokens(tokens));\n  };\n\n  const formattedAddress = () => {\n    if (address.length < 8) return \"\";\n    return `${address.substr(0, 4)}...${address.substr(address.length - 4, 4)}`;\n  };\n\n  return (\n    <StyledConnector>\n      <Button\n        text={address ? formattedAddress() : \"Connect\"}\n        click={() => connect()}\n      />\n    </StyledConnector>\n  );\n};\n\nexport default Connector;\n"]},"metadata":{},"sourceType":"module"}