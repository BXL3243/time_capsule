{"ast":null,"code":"import Web3 from \"web3\";\nimport BN from \"bn.js\";\nimport capsuleAbi from \"../contracts/CryptoCapsule.json\";\nimport tokenAbi from \"../contracts/ERC20.json\";\nimport { toEthUnit } from \"./web3Service\";\nimport { dateToUnix, getPeriodType, UnixToDate } from \"./dateHelper\";\nimport { getGlobals } from \"../utils/globals\"; // Shared\n\nexport const isConnected = () => {\n  return window.web3.eth;\n};\nexport const getAddress = async () => {\n  if (window.ethereum) {\n    window.web3 = new Web3(window.ethereum);\n    window.ethereum.enable();\n    const addressList = await window.web3.eth.getAccounts();\n    return addressList[0];\n  }\n\n  return \"\";\n};\nexport const getCapsuleContract = async () => {\n  const globals = await getGlobals();\n  return new window.web3.eth.Contract(capsuleAbi, globals.CAPSULE, {\n    from: await getAddress()\n  });\n};\nexport const getTokenContract = async token => {\n  return new window.web3.eth.Contract(tokenAbi, token, {\n    from: await getAddress()\n  });\n}; // Functions\n\nexport const createCapsule = async (beneficiary, distributionDate, periodSize, periodCount, assets, addingAssetsAllowed, message) => {\n  const address = await getAddress();\n  const capsuleContract = await getCapsuleContract();\n  const ethAssets = assets.filter(a => a.token === \"ETH\");\n  const eth = ethAssets.length === 1 ? ethAssets[0].value : 0;\n  const otherAssets = assets.filter(a => a.token !== \"ETH\");\n  const tx = {\n    from: address,\n    value: eth\n  };\n  await capsuleContract.methods.createCapsule(beneficiary, dateToUnix(distributionDate), periodSize, periodCount, otherAssets.map(a => a.token), otherAssets.map(a => a.value), addingAssetsAllowed, message).send(tx);\n};\nexport const openCapsule = async capsuleId => {\n  const capsuleContract = await getCapsuleContract();\n  await capsuleContract.methods.openCapsule(new BN(capsuleId)).send();\n};\nexport const addAssets = async (capsuleId, assets) => {\n  const address = await getAddress();\n  const capsuleContract = await getCapsuleContract();\n  const ethAssets = assets.filter(a => a.token === \"ETH\");\n  const eth = ethAssets.length === 1 ? ethAssets[0].value : 0;\n  const otherAssets = assets.filter(a => a.token !== \"ETH\");\n  const tx = {\n    from: address,\n    value: eth\n  };\n  await capsuleContract.methods.addAssets(capsuleId, otherAssets.map(a => a.token), otherAssets.map(a => a.value)).send(tx);\n};\nexport const updateBeneficiary = async (capsuleId, beneficiary) => {\n  const capsuleContract = await getCapsuleContract();\n  await capsuleContract.methods.updateBeneficiary(capsuleId, beneficiary).send();\n}; // Views\n\nexport const getCapsule = async (capsuleId) => {\n  if (!isConnected()) return null;\n  const capsuleContract = await getCapsuleContract();\n  const response = await capsuleContract.methods.getCapsule(capsuleId).call();\n  return responseToCapsule(response);\n};\nexport const getSentCapsules = async () => {\n  if (!isConnected()) return [];\n  const address = await getAddress();\n  const capsuleContract = await getCapsuleContract();\n  const response = await capsuleContract.methods.getSentCapsules(address).call();\n  return response.map(rc => responseToCapsule(rc));\n};\nexport const getReceivedCapsules = async () => {\n  if (!isConnected()) return [];\n  const address = await getAddress();\n  const capsuleContract = await getCapsuleContract();\n  const response = await capsuleContract.methods.getReceivedCapsules(address).call();\n  return response.map(rc => responseToCapsule(rc));\n}; // Utils\n\nexport const responseToCapsule = capsule => {\n  const assets = [];\n  const eth = toEthUnit(new BN(capsule.value));\n  if (eth > 0) assets.push({\n    token: \"ETH\",\n    value: capsule.value\n  });\n\n  for (let i = 0; i < capsule.tokens.length; i++) {\n    assets.push({\n      token: capsule.tokens[i],\n      value: capsule.amounts[i]\n    });\n  }\n\n  return {\n    id: Number(capsule.id),\n    beneficiary: capsule.beneficiary,\n    grantor: capsule.grantor,\n    empty: capsule.empty,\n    createdDate: UnixToDate(Number.parseFloat(capsule.createdDate)),\n    distributionDate: UnixToDate(Number.parseFloat(capsule.distributionDate)),\n    periodType: getPeriodType(capsule.periodSize),\n    periodCount: Number(capsule.periodCount),\n    claimedPeriods: Number(capsule.claimedPeriods),\n    assets,\n    addingAssetsAllowed: capsule.addingAssetsAllowed\n  };\n};\nexport const ethBalance = async () => {\n  const address = await getAddress();\n  const wei = await window.web3.eth.getBalance(address);\n  return toEthUnit(wei);\n}; // Tokens\n\nexport const approveToken = async token => {\n  const globals = await getGlobals();\n  const tokenContract = await getTokenContract(token);\n  await tokenContract.methods.approve(globals.CAPSULE, new BN(\"9999999999999999999999999999\")).send();\n};\nexport const tokenApproved = async token => {\n  if (token === \"ETH\") return true;\n  const globals = await getGlobals();\n  const address = await getAddress();\n  const tokenContract = await getTokenContract(token);\n  const allowance = await tokenContract.methods.allowance(address, globals.CAPSULE).call();\n  return new BN(allowance).gt(new BN(\"9999999999999999999999\"));\n};\nexport const tokenBalance = async token => {\n  const address = await getAddress();\n  const tokenContract = await getTokenContract(token.address);\n  const cents = await tokenContract.methods.balanceOf(address).call();\n  return cents / 10 ** token.decimals;\n};\nexport const getAssetSymbol = async token => {\n  if (token.toLocaleLowerCase() === \"eth\") return \"ETH\";\n  const tokenContract = await getTokenContract(token);\n  return tokenContract.methods.symbol().call();\n};\nexport const getAssetDecimals = async token => {\n  if (token.toLocaleLowerCase() === \"eth\") return 18;\n  const tokenContract = await getTokenContract(token);\n  return tokenContract.methods.decimals().call();\n};\nexport const getAssetRealValue = async asset => {\n  if (asset.value === \"0\") return 0;\n  const decimals = await getAssetDecimals(asset.token);\n  return Number(asset.value) / 10 ** decimals;\n};\nexport const getAssetLongValue = async (value, token) => {\n  if (value === 0) return \"0\";\n  const decimals = await getAssetDecimals(token);\n  return Math.round(value * 10 ** decimals).toString();\n};\nexport const getCapsuleMessage = async capsuleId => {\n  const capsuleContract = await getCapsuleContract();\n  const encMessage = await capsuleContract.methods.getMessage(new BN(capsuleId)).call();\n  console.log(encMessage);\n  return encMessage;\n};","map":{"version":3,"sources":["/Users/richard/Documents/GitHub/time_capsule/client/src/services/contracthelper.ts"],"names":["Web3","BN","capsuleAbi","tokenAbi","toEthUnit","dateToUnix","getPeriodType","UnixToDate","getGlobals","isConnected","window","web3","eth","getAddress","ethereum","enable","addressList","getAccounts","getCapsuleContract","globals","Contract","CAPSULE","from","getTokenContract","token","createCapsule","beneficiary","distributionDate","periodSize","periodCount","assets","addingAssetsAllowed","message","address","capsuleContract","ethAssets","filter","a","length","value","otherAssets","tx","methods","map","send","openCapsule","capsuleId","addAssets","updateBeneficiary","getCapsule","response","call","responseToCapsule","getSentCapsules","rc","getReceivedCapsules","capsule","push","i","tokens","amounts","id","Number","grantor","empty","createdDate","parseFloat","periodType","claimedPeriods","ethBalance","wei","getBalance","approveToken","tokenContract","approve","tokenApproved","allowance","gt","tokenBalance","cents","balanceOf","decimals","getAssetSymbol","toLocaleLowerCase","symbol","getAssetDecimals","getAssetRealValue","asset","getAssetLongValue","Math","round","toString","getCapsuleMessage","encMessage","getMessage","console","log"],"mappings":"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","sourcesContent":["import { Contract } from \"web3-eth-contract\";\nimport Web3 from \"web3\";\nimport BN from \"bn.js\";\nimport capsuleAbi from \"../contracts/CryptoCapsule.json\";\nimport tokenAbi from \"../contracts/ERC20.json\";\nimport { toEthUnit } from \"./web3Service\";\nimport { dateToUnix, getPeriodType, UnixToDate } from \"./dateHelper\";\nimport CapsuleType, { Asset } from \"../types/CapsuleType\";\nimport ContractCapsuleType from \"../types/ContractCapsuleType\";\nimport Token from \"../types/Token\";\nimport { getGlobals } from \"../utils/globals\";\n\n// Shared\nexport const isConnected = (): boolean => {\n  return (window as any).web3.eth;\n};\n\nexport const getAddress = async (): Promise<string> => {\n  if ((window as any).ethereum) {\n    (window as any).web3 = new Web3((window as any).ethereum);\n    (window as any).ethereum.enable();\n    const addressList = await (window as any).web3.eth.getAccounts();\n    return addressList[0];\n  }\n  return \"\";\n};\n\nexport const getCapsuleContract = async (): Promise<Contract> => {\n  const globals = await getGlobals();\n  return new (window as any).web3.eth.Contract(capsuleAbi, globals.CAPSULE, {\n    from: await getAddress(),\n  });\n};\n\nexport const getTokenContract = async (token: string): Promise<Contract> => {\n  return new (window as any).web3.eth.Contract(tokenAbi, token, {\n    from: await getAddress(),\n  });\n};\n\n// Functions\nexport const createCapsule = async (\n  beneficiary: string,\n  distributionDate: Date,\n  periodSize: number,\n  periodCount: number,\n  assets: Asset[],\n  addingAssetsAllowed: boolean,\n  message: string\n): Promise<void> => {\n  const address = await getAddress();\n  const capsuleContract = await getCapsuleContract();\n\n  const ethAssets = assets.filter((a: Asset) => a.token === \"ETH\");\n  const eth = ethAssets.length === 1 ? ethAssets[0].value : 0;\n  const otherAssets = assets.filter((a: Asset) => a.token !== \"ETH\");\n\n  const tx = {\n    from: address,\n    value: eth,\n  };\n  await capsuleContract.methods\n    .createCapsule(\n      beneficiary,\n      dateToUnix(distributionDate),\n      periodSize,\n      periodCount,\n      otherAssets.map((a: Asset) => a.token),\n      otherAssets.map((a: Asset) => a.value),\n      addingAssetsAllowed,\n      message\n    )\n    .send(tx);\n};\n\nexport const openCapsule = async (capsuleId: number): Promise<void> => {\n  const capsuleContract = await getCapsuleContract();\n  await capsuleContract.methods.openCapsule(new BN(capsuleId)).send();\n};\n\nexport const addAssets = async (\n  capsuleId: number,\n  assets: Asset[]\n): Promise<void> => {\n  const address = await getAddress();\n  const capsuleContract = await getCapsuleContract();\n\n  const ethAssets = assets.filter((a: Asset) => a.token === \"ETH\");\n  const eth = ethAssets.length === 1 ? ethAssets[0].value : 0;\n  const otherAssets = assets.filter((a: Asset) => a.token !== \"ETH\");\n\n  const tx = {\n    from: address,\n    value: eth,\n  };\n  await capsuleContract.methods\n    .addAssets(\n      capsuleId,\n      otherAssets.map((a: Asset) => a.token),\n      otherAssets.map((a: Asset) => a.value)\n    )\n    .send(tx);\n};\n\nexport const updateBeneficiary = async (\n  capsuleId: number,\n  beneficiary: string\n): Promise<void> => {\n  const capsuleContract = await getCapsuleContract();\n  await capsuleContract.methods\n    .updateBeneficiary(capsuleId, beneficiary)\n    .send();\n};\n\n// Views\nexport const getCapsule = async (\n  capsuleId: number\n): Promise<CapsuleType | null> => {\n  if (!isConnected()) return null;\n  const capsuleContract = await getCapsuleContract();\n  const response: ContractCapsuleType = await capsuleContract.methods\n    .getCapsule(capsuleId)\n    .call();\n  return responseToCapsule(response);\n};\n\nexport const getSentCapsules = async (): Promise<CapsuleType[]> => {\n  if (!isConnected()) return [];\n  const address = await getAddress();\n  const capsuleContract = await getCapsuleContract();\n  const response: ContractCapsuleType[] = await capsuleContract.methods\n    .getSentCapsules(address)\n    .call();\n  return response.map((rc: ContractCapsuleType) => responseToCapsule(rc));\n};\n\nexport const getReceivedCapsules = async (): Promise<CapsuleType[]> => {\n  if (!isConnected()) return [];\n  const address = await getAddress();\n  const capsuleContract = await getCapsuleContract();\n  const response: ContractCapsuleType[] = await capsuleContract.methods\n    .getReceivedCapsules(address)\n    .call();\n  return response.map((rc: ContractCapsuleType) => responseToCapsule(rc));\n};\n\n// Utils\nexport const responseToCapsule = (\n  capsule: ContractCapsuleType\n): CapsuleType => {\n  const assets: Asset[] = [];\n  const eth = toEthUnit(new BN(capsule.value));\n  if (eth > 0) assets.push({ token: \"ETH\", value: capsule.value });\n  for (let i = 0; i < capsule.tokens.length; i++) {\n    assets.push({\n      token: capsule.tokens[i],\n      value: capsule.amounts[i],\n    });\n  }\n\n  return {\n    id: Number(capsule.id),\n    beneficiary: capsule.beneficiary,\n    grantor: capsule.grantor,\n    empty: capsule.empty,\n    createdDate: UnixToDate(Number.parseFloat(capsule.createdDate)),\n    distributionDate: UnixToDate(Number.parseFloat(capsule.distributionDate)),\n    periodType: getPeriodType(capsule.periodSize),\n    periodCount: Number(capsule.periodCount),\n    claimedPeriods: Number(capsule.claimedPeriods),\n    assets,\n    addingAssetsAllowed: capsule.addingAssetsAllowed,\n  };\n};\n\nexport const ethBalance = async (): Promise<number> => {\n  const address = await getAddress();\n  const wei = await window.web3.eth.getBalance(address);\n  return toEthUnit(wei);\n};\n\n// Tokens\nexport const approveToken = async (token: string): Promise<void> => {\n  const globals = await getGlobals();\n  const tokenContract = await getTokenContract(token);\n  await tokenContract.methods\n    .approve(globals.CAPSULE, new BN(\"9999999999999999999999999999\"))\n    .send();\n};\n\nexport const tokenApproved = async (token: string): Promise<boolean> => {\n  if (token === \"ETH\") return true;\n  const globals = await getGlobals();\n  const address = await getAddress();\n  const tokenContract = await getTokenContract(token);\n  const allowance = await tokenContract.methods\n    .allowance(address, globals.CAPSULE)\n    .call();\n  return new BN(allowance).gt(new BN(\"9999999999999999999999\"));\n};\n\nexport const tokenBalance = async (token: Token): Promise<number> => {\n  const address = await getAddress();\n  const tokenContract = await getTokenContract(token.address);\n  const cents = await tokenContract.methods.balanceOf(address).call();\n  return cents / 10 ** token.decimals;\n};\n\nexport const getAssetSymbol = async (token: string): Promise<string> => {\n  if (token.toLocaleLowerCase() === \"eth\") return \"ETH\";\n  const tokenContract = await getTokenContract(token);\n  return tokenContract.methods.symbol().call();\n};\n\nexport const getAssetDecimals = async (token: string): Promise<number> => {\n  if (token.toLocaleLowerCase() === \"eth\") return 18;\n  const tokenContract = await getTokenContract(token);\n  return tokenContract.methods.decimals().call();\n};\n\nexport const getAssetRealValue = async (asset: Asset): Promise<number> => {\n  if (asset.value === \"0\") return 0;\n  const decimals = await getAssetDecimals(asset.token);\n  return Number(asset.value) / 10 ** decimals;\n};\n\nexport const getAssetLongValue = async (\n  value: number,\n  token: string\n): Promise<string> => {\n  if (value === 0) return \"0\";\n  const decimals = await getAssetDecimals(token);\n  return Math.round(value * 10 ** decimals).toString();\n};\n\nexport const getCapsuleMessage = async (capsuleId: number): Promise<string> => {\n  const capsuleContract = await getCapsuleContract();\n  const encMessage = await capsuleContract.methods\n    .getMessage(new BN(capsuleId))\n    .call();\n  console.log(encMessage);\n  return encMessage;\n};\n"]},"metadata":{},"sourceType":"module"}