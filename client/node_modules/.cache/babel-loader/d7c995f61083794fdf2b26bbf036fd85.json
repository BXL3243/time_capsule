{"ast":null,"code":"import { ethOracles, rinkebyOracles } from \"../data/oracles\";\nimport rinkebyTokens from \"../data/rinkebyTokens\";\nimport { getNetwork } from \"../services/web3Service\";\nexport const TEST_MODE = true;\nconst RINKEBY_GLOBALS = {\n  CAPSULE: \"0x56fDA59a60a4fBf9bf090b4b5aF6B76964E5B1B4\",\n  TOKENS: rinkebyTokens,\n  TOKENS_URL: \"\",\n  ORACLES: rinkebyOracles\n};\nconst ETH_GLOBALS = {\n  CAPSULE: \"0x56fDA59a60a4fBf9bf090b4b5aF6B76964E5B1B4\",\n  TOKENS: [],\n  TOKENS_URL: \"https://tokens.coingecko.com/uniswap/all.json\",\n  ORACLES: ethOracles\n};\nconst ARBITRUM_GLOBALS = {\n  CAPSULE: \"0x5b884817588a037a2668135031ebe2a36ca2957c\",\n  TOKENS: [],\n  TOKENS_URL: \"https://tokens.coingecko.com/uniswap/all.json\",\n  ORACLES: ethOracles\n};\nexport const getGlobals = async () => {\n  const networkId = await getNetwork();\n  if (networkId === 4) return RINKEBY_GLOBALS;\n  if (networkId === 42161) return ARBITRUM_GLOBALS; // if (networkId === 56) return BSC_GLOBALS;\n\n  return ETH_GLOBALS;\n};","map":{"version":3,"sources":["/Users/richard/Documents/GitHub/time_sapsule/client/src/utils/globals.ts"],"names":["ethOracles","rinkebyOracles","rinkebyTokens","getNetwork","TEST_MODE","RINKEBY_GLOBALS","CAPSULE","TOKENS","TOKENS_URL","ORACLES","ETH_GLOBALS","ARBITRUM_GLOBALS","getGlobals","networkId"],"mappings":"AAAA,SAASA,UAAT,EAAiCC,cAAjC,QAAuD,iBAAvD;AACA,OAAOC,aAAP,MAA0B,uBAA1B;AACA,SAASC,UAAT,QAA2B,yBAA3B;AAGA,OAAO,MAAMC,SAAS,GAAG,IAAlB;AASP,MAAMC,eAA4B,GAAG;AACnCC,EAAAA,OAAO,EAAE,4CAD0B;AAEnCC,EAAAA,MAAM,EAAEL,aAF2B;AAGnCM,EAAAA,UAAU,EAAE,EAHuB;AAInCC,EAAAA,OAAO,EAAER;AAJ0B,CAArC;AAOA,MAAMS,WAAwB,GAAG;AAC/BJ,EAAAA,OAAO,EAAE,4CADsB;AAE/BC,EAAAA,MAAM,EAAE,EAFuB;AAG/BC,EAAAA,UAAU,EAAE,+CAHmB;AAI/BC,EAAAA,OAAO,EAAET;AAJsB,CAAjC;AAOA,MAAMW,gBAA6B,GAAG;AACpCL,EAAAA,OAAO,EAAE,4CAD2B;AAEpCC,EAAAA,MAAM,EAAE,EAF4B;AAGpCC,EAAAA,UAAU,EAAE,+CAHwB;AAIpCC,EAAAA,OAAO,EAAET;AAJ2B,CAAtC;AAOA,OAAO,MAAMY,UAAU,GAAG,YAAkC;AAC1D,QAAMC,SAAS,GAAG,MAAMV,UAAU,EAAlC;AACA,MAAIU,SAAS,KAAK,CAAlB,EAAqB,OAAOR,eAAP;AACrB,MAAIQ,SAAS,KAAK,KAAlB,EAAyB,OAAOF,gBAAP,CAHiC,CAI1D;;AACA,SAAOD,WAAP;AACD,CANM","sourcesContent":["import { ethOracles, OracleType, rinkebyOracles } from \"../data/oracles\";\nimport rinkebyTokens from \"../data/rinkebyTokens\";\nimport { getNetwork } from \"../services/web3Service\";\nimport Token from \"../types/Token\";\n\nexport const TEST_MODE = true;\n\ntype GlobalsType = {\n  CAPSULE: string;\n  TOKENS: Token[];\n  TOKENS_URL: string;\n  ORACLES: OracleType[];\n};\n\nconst RINKEBY_GLOBALS: GlobalsType = {\n  CAPSULE: \"0x56fDA59a60a4fBf9bf090b4b5aF6B76964E5B1B4\",\n  TOKENS: rinkebyTokens,\n  TOKENS_URL: \"\",\n  ORACLES: rinkebyOracles,\n};\n\nconst ETH_GLOBALS: GlobalsType = {\n  CAPSULE: \"0x56fDA59a60a4fBf9bf090b4b5aF6B76964E5B1B4\",\n  TOKENS: [],\n  TOKENS_URL: \"https://tokens.coingecko.com/uniswap/all.json\",\n  ORACLES: ethOracles,\n};\n\nconst ARBITRUM_GLOBALS: GlobalsType = {\n  CAPSULE: \"0x5b884817588a037a2668135031ebe2a36ca2957c\",\n  TOKENS: [],\n  TOKENS_URL: \"https://tokens.coingecko.com/uniswap/all.json\",\n  ORACLES: ethOracles,\n};\n\nexport const getGlobals = async (): Promise<GlobalsType> => {\n  const networkId = await getNetwork();\n  if (networkId === 4) return RINKEBY_GLOBALS;\n  if (networkId === 42161) return ARBITRUM_GLOBALS;\n  // if (networkId === 56) return BSC_GLOBALS;\n  return ETH_GLOBALS;\n};\n"]},"metadata":{},"sourceType":"module"}