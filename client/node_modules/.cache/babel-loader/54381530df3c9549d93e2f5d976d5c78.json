{"ast":null,"code":"import _regeneratorRuntime from\"/Users/richard/Documents/GitHub/time_sapsule/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/richard/Documents/GitHub/time_sapsule/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{ethOracles,rinkebyOracles}from\"../data/oracles\";import rinkebyTokens from\"../data/rinkebyTokens\";import{getNetwork}from\"../services/web3Service\";export var TEST_MODE=true;var RINKEBY_GLOBALS={CAPSULE:\"0x56fDA59a60a4fBf9bf090b4b5aF6B76964E5B1B4\",TOKENS:rinkebyTokens,TOKENS_URL:\"\",ORACLES:rinkebyOracles};var ETH_GLOBALS={CAPSULE:\"0x56fDA59a60a4fBf9bf090b4b5aF6B76964E5B1B4\",TOKENS:[],TOKENS_URL:\"https://tokens.coingecko.com/uniswap/all.json\",ORACLES:ethOracles};var ARBITRUM_GLOBALS={CAPSULE:\"0x5b884817588a037a2668135031ebe2a36ca2957c\",TOKENS:[],TOKENS_URL:\"https://tokens.coingecko.com/uniswap/all.json\",ORACLES:ethOracles};export var getGlobals=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var networkId;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return getNetwork();case 2:networkId=_context.sent;if(!(networkId===4)){_context.next=5;break;}return _context.abrupt(\"return\",RINKEBY_GLOBALS);case 5:if(!(networkId===42161)){_context.next=7;break;}return _context.abrupt(\"return\",ARBITRUM_GLOBALS);case 7:return _context.abrupt(\"return\",ETH_GLOBALS);case 8:case\"end\":return _context.stop();}}},_callee);}));return function getGlobals(){return _ref.apply(this,arguments);};}();","map":{"version":3,"sources":["/Users/richard/Documents/GitHub/time_sapsule/client/src/utils/globals.ts"],"names":["ethOracles","rinkebyOracles","rinkebyTokens","getNetwork","TEST_MODE","RINKEBY_GLOBALS","CAPSULE","TOKENS","TOKENS_URL","ORACLES","ETH_GLOBALS","ARBITRUM_GLOBALS","getGlobals","networkId"],"mappings":"iVAAA,OAASA,UAAT,CAAiCC,cAAjC,KAAuD,iBAAvD,CACA,MAAOC,CAAAA,aAAP,KAA0B,uBAA1B,CACA,OAASC,UAAT,KAA2B,yBAA3B,CAGA,MAAO,IAAMC,CAAAA,SAAS,CAAG,IAAlB,CASP,GAAMC,CAAAA,eAA4B,CAAG,CACnCC,OAAO,CAAE,4CAD0B,CAEnCC,MAAM,CAAEL,aAF2B,CAGnCM,UAAU,CAAE,EAHuB,CAInCC,OAAO,CAAER,cAJ0B,CAArC,CAOA,GAAMS,CAAAA,WAAwB,CAAG,CAC/BJ,OAAO,CAAE,4CADsB,CAE/BC,MAAM,CAAE,EAFuB,CAG/BC,UAAU,CAAE,+CAHmB,CAI/BC,OAAO,CAAET,UAJsB,CAAjC,CAOA,GAAMW,CAAAA,gBAA6B,CAAG,CACpCL,OAAO,CAAE,4CAD2B,CAEpCC,MAAM,CAAE,EAF4B,CAGpCC,UAAU,CAAE,+CAHwB,CAIpCC,OAAO,CAAET,UAJ2B,CAAtC,CAOA,MAAO,IAAMY,CAAAA,UAAU,0FAAG,uKACAT,CAAAA,UAAU,EADV,QAClBU,SADkB,oBAEpBA,SAAS,GAAK,CAFM,0DAEIR,eAFJ,cAGpBQ,SAAS,GAAK,KAHM,0DAGQF,gBAHR,yCAKjBD,WALiB,wDAAH,kBAAVE,CAAAA,UAAU,0CAAhB","sourcesContent":["import { ethOracles, OracleType, rinkebyOracles } from \"../data/oracles\";\nimport rinkebyTokens from \"../data/rinkebyTokens\";\nimport { getNetwork } from \"../services/web3Service\";\nimport Token from \"../types/Token\";\n\nexport const TEST_MODE = true;\n\ntype GlobalsType = {\n  CAPSULE: string;\n  TOKENS: Token[];\n  TOKENS_URL: string;\n  ORACLES: OracleType[];\n};\n\nconst RINKEBY_GLOBALS: GlobalsType = {\n  CAPSULE: \"0x56fDA59a60a4fBf9bf090b4b5aF6B76964E5B1B4\",\n  TOKENS: rinkebyTokens,\n  TOKENS_URL: \"\",\n  ORACLES: rinkebyOracles,\n};\n\nconst ETH_GLOBALS: GlobalsType = {\n  CAPSULE: \"0x56fDA59a60a4fBf9bf090b4b5aF6B76964E5B1B4\",\n  TOKENS: [],\n  TOKENS_URL: \"https://tokens.coingecko.com/uniswap/all.json\",\n  ORACLES: ethOracles,\n};\n\nconst ARBITRUM_GLOBALS: GlobalsType = {\n  CAPSULE: \"0x5b884817588a037a2668135031ebe2a36ca2957c\",\n  TOKENS: [],\n  TOKENS_URL: \"https://tokens.coingecko.com/uniswap/all.json\",\n  ORACLES: ethOracles,\n};\n\nexport const getGlobals = async (): Promise<GlobalsType> => {\n  const networkId = await getNetwork();\n  if (networkId === 4) return RINKEBY_GLOBALS;\n  if (networkId === 42161) return ARBITRUM_GLOBALS;\n  // if (networkId === 56) return BSC_GLOBALS;\n  return ETH_GLOBALS;\n};\n"]},"metadata":{},"sourceType":"module"}